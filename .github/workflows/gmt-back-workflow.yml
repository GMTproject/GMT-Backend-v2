name: gmt-back-workflow

on:
  push:
    branches: ["develop","feature/24-workflow"]
  pull_request:
    branches: ["*"]

env:
  DOCKER_HUB_USERNAME: seolhee
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_IMAGE_NAME }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
  JWT_ACCESS_SECRET: ${{ secrets.JWT_ACCESS_SECRET }}
  JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
  JWT_ACCESS_TIME: ${{ secrets.JWT_ACCESS_TIME }}
  JWT_REFRESH_TIME: ${{ secrets.JWT_REFRESH_TIME }}
  GAUTH_CLIENTID: ${{ secrets.GAUTH_CLIENTID }}
  GAUTH_CLIENT_SECRET: ${{ secrets.GAUTH_CLIENT_SECRET }}
  GAUTH_REDIRECT_URI: ${{ secrets.GAUTH_REDIRECT_URI }}
  EC2_ADDRESS: ${{ secrets.EC2_ADDRESS }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  gmt-back-workflow:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_SCHEMA }}
        ports:
          - 3306:3306

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Init Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 7.6.1

      - name: Set up JDK 11 (job success)
        if: ${{ success() }}
        run: echo "Set up JDK 11 is succeeded"

      - name: Setup Gradle's permission
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Docker Login
        uses: docker/login-action@f3364599c6aa293cdc2b8391b1b56d0c30e45c8a
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_PASSWORD }}

      - name: SSH into EC2 instance and run docker-compose commands
        uses: appleboy/ssh-action@master
        env:
          DOCKER_HUB_USERNAME: seolhee
          DOCKER_HUB_PASSWORD: ${{ env.DOCKER_HUB_PASSWORD }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_USER: ${{ env.DB_USER }}
          DB_SCHEMA: ${{ env.DB_SCHEMA }}
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
        with:
          host: ${{ env.EC2_ADDRESS }}
          username: ec2-user
          key: ${{ env.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "${{secrets.ENV}}" > ./.env
            sudo docker-compose up


#      - name: Docker build And Push
#        run: |
#          docker build -t $DOCKER_IMAGE_NAME .
#          docker tag $DOCKER_IMAGE_NAME $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest
#          docker push $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest
#
#        env:
#          DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}

#        with:
#          envs: DOCKER_HUB_USERNAME,DOCKER_HUB_PASSWORD,DOCKER_IMAGE_NAME,DB_HOST,DB_PORT,DB_USER,DB_PASSWORD,DB_SCHEMA
#          script: |
#            echo $DOCKER_HUB_PASSWORD | sudo docker login -u $DOCKER_HUB_USERNAME --password-stdin
#            sudo docker stop pmn || true
#            sudo docker rm pmn || true
#            sudo docker pull $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest
#            sudo docker run --name pmn -p 80:8080 -d -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_SCHEMA=$DB_SCHEMA -e DB_USER=$DB_USER -e DB_PASSWORD=$DB_PASSWORD $DOCKER_HUB_USERNAME/$DOCKER_IMAGE_NAME:latest
